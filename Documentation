Requirements:
  * python-openssl
  * python-pysqlite2

Backends:
  * PostgreSQL
  * SQLite3

Backend (PostgreSQL):
  * Tables:
  * (Details can be found in the backend/pgsql/pgsql.sql file)

Configuration:

# make sure to set correct access rights to this
# file as it contains critical informations!

[global]
# backend:
#  psql - PostgreSQL
#  mysql - MySQL
#  sqlite3 - SQLite3
backend = psql

# path to public and private ca key
# and the passphrase protecting it.
ca_public_key = /path/to/public/ca/certificate
ca_private_key = /path/to/private/ca/certificate
ca_passphrase = ItsSoFluffyImGonnaDie!

# default message digest to use when signing certificates
# see man 1ssl dgst for supported digest algorithm
digest = sha256

# use random serial number for certificates (random) or increment
# the serial number (increment)
serial_number = random

# default validity period for new certificates
validity_period = 1095

# renew autorenwable certificates if less than autorenew_delta days left
autorenew_delta = 1

# path to crl signing certificarte and private
# key and the passphrase protecting it
crl_public_key = /home/maus/_/python-pkidb/tmp/tmp/crl.pem
crl_private_key = /home/maus/_/python-pkidb/tmp/tmp/crl.key
crl_passphrase = AssembleTheMinions!

# numver of days before the next crl is due
crl_validity_period = 30

# message digest to use for crl signing
crl_digest = sha512

# Backend configurations
[pgsql]
host = 127.0.0.1
port = 5432
user = dbuser
passphrase = DoesThisCountAsAnnoying?
database = pkidb

[sqlite3]
database = pkidb

[mysql]
host = 127.0.0.1
port = 5432
user = dbuser
passphrase = DoesThisCountAsAnnoying?
database = pkidb

Getting started:
  * create database user, e.g.

    * PostgreSQL:

createuser --encrypted --no-inherit --no-createrole --no-superuser --no-createdb --pwprompt <username>)

    * MySQL:
      * as MySQL administrator:

CREATE USER '<username>'@'<host>' IDENTIFIED BY '<password>'

    * SQLite3: -

  * create empty database and assign ownership to <username>
    * PostgreSQL:

createdb --owner=<username> --encoding=UTF8 <database>

    * SQLite3: -

    * MySQL:
      * as MySQL administrator:

CREATE DATABASE <database>;

  * initialize database:
    * PostgreSQL:

pgsql <database> < /path/to/installation/initialize/pgsql/pgsql.sql

    * SQLite3:

sqlite3 <database> < /path/to/installation/initialize/sqlite/sqlite.sql

  * grant access right to created user <username>:
    * PostgreSQL:

/path/to/installation/initialize/pgsql/grant.sh <database> <username>

    * SQLite3:
chown <username> <database>

    * MySQL:
      * as MySQL administrator:
GRANT ALL ON '<database>'.* TO '<username>'.'<host>';

Commands:
 sign - sign csr
  * pass certificate signing request as file or - to read from stdin

 revoke - revoke certificate
  * pass certificate to revoke as file or - to read from stdin

 search - search certificate in data backend
  * 
Options:
 --digest=<dgst>  Sign certificate using <dgst> instead of default digest
 --config=<cfg>   Configuration file to use instead of the default (/etc/pki/config.ini)
